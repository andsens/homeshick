#!/usr/bin/env bash

repos="$HOME/.homesick/repos"
homeshick="$repos/homeshick"
# It's either this^ or the one below:
# scriptdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# The install script however symlinks us. So $0 changes.

source $homeshick/utils/log.sh
source $homeshick/utils/fs.sh
source $homeshick/utils/git.sh
source $homeshick/utils/help.sh


test -x $(which git) || err "git not found in path"

mkdir -p "$repos"

TALK=true
SKIP=false
FORCE=false

# Retrieve all the flags preceeding a subcommand
while [[ $# -gt 0 ]]; do
	if [[ $1 =~ ^- ]]; then
		case $1 in
			-h | --help)  cmd="help" ; shift; continue ;;
			-q | --quiet) TALK=true  ; shift; continue ;;
			-s | --skip)  SKIP=true  ; shift; continue ;;
			-f | --force) FORCE=true ; shift; continue ;;
			*)            err "Unknown option '$1'"    ;;
		esac
	else
		break
	fi
done

[[ $# -gt 0 ]] || cmd="help"

# Get the subcommand
if [[ -z $cmd ]]; then
	for valid_cmd in clone generate list check updates pull symlink link track help; do
		if [[ $valid_cmd = $1 ]]; then
			cmd=$1
			shift
			break
		fi
	done
	if [[ -z $cmd ]]; then
		err "Unknown command '$1'"
	fi
fi

# Get the arguments for the subcommand, also parse flags if there are any left
while [[ $# -gt 0 ]]; do
	if [[ "$1" =~ ^- ]]; then
		case $1 in
			-h | --help)  cmd="help" ; shift; continue ;;
			-q | --quiet) TALK=true  ; shift; continue ;;
			-s | --skip)  SKIP=true  ; shift; continue ;;
			-f | --force) FORCE=true ; shift; continue ;;
			*)            err "Unknown option '$1'"    ;;
		esac
	fi

	case $cmd in
		clone | generate | check | pull | symlink | link)
			[[ -z $params ]] && params=()
			params+=($1)
			shift; continue ;;
		track)
			if [[ -z $castle ]]; then
				castle=$1
				params=()
			else
				params+=($1)
			fi
			shift; continue ;;
		updates)
			shift; continue ;;
		list) err "The 'list' command does not take any arguments" ;;
		help) [[ -z $help_cmd ]] && help_cmd=$1
			shift; continue;;
		*)    err "Unknown command '$1'" ;;
	esac
done

# If no additional arguments are give, run the subcommand for every castle
if [[ -z $params ]]; then
	case $cmd in
		check | updates | pull | symlink) params=$(list_castle_names) ;;
	esac
fi

case $cmd in
	list)  list           ;;
	help)  help $help_cmd ;;
	*)
		for param in ${params[*]}; do
			case $cmd in
				clone)         clone $param         ;;
				generate)      generate $param      ;;
				check|updates) check $param         ;;
				pull)          pull $param          ;;
				symlink|link)  symlink $param       ;;
				track)         track $castle $param ;;
			esac
		done
		;;
esac
