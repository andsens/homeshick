#!/usr/bin/env bash

set -e
SCRIPTDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
export SCRIPTDIR

if [[ -n $1 ]]; then
  if [[ $1 == '--help' ]]; then
    printf "Run homeshick working copy interactively\n"
    printf " Usage: interactive [shell]\n"
    exit 0
  else
    if [[ $# -gt 1 ]]; then
      printf "only one SHELL argument allowed\n" >&2
      exit 64 # 64=$EX_USAGE
    fi
    _shell=$1
  fi
fi

if [[ -z $_shell ]]; then
  _shell=$SHELL
fi

# Replacements for the run and load functions in bats
# Disable SC2034 for global variables
# shellcheck disable=SC2034
run() {
  local e E T
  [[ ! "$-" =~ e ]] || e=1
  [[ ! "$-" =~ E ]] || E=1
  [[ ! "$-" =~ T ]] || T=1
  set +e
  set +E
  set +T
  output="$("$@" 2>&1)"
  status="$?"
  # shellcheck disable=SC2206
  IFS=$'\n' lines=($output)
  [ -z "$e" ] || set -e
  [ -z "$E" ] || set -E
  [ -z "$T" ] || set -T
}

# extracted from bats-core/lib/bats-core/test_functions.bash
_bats_internal_load() {
  # note: stripped out redundant error checking, as this is only used from our load

  # shellcheck disable=SC1090
  if ! source "$1"; then
    printf "Error while sourcing library loader at '%s'\n" "$1" >&2
    return 1
  fi
  return 0
}
load() {
  local slug="${1:?}"
  if [[ ${slug:0:1} != / ]]; then # relative paths are relative to BATS_TEST_DIRNAME
    slug="$BATS_TEST_DIRNAME/$slug"
  fi

  if [[ -f "$slug.bash" ]]; then
    _bats_internal_load "$slug.bash"
    return $?
  elif [[ -f "$slug" ]]; then
    _bats_internal_load "$slug"
    return $?
  fi

  # loading from PATH (retained for backwards compatibility)
  if [[ ! -f "$1" ]] && type -P "$1" >/dev/null; then
    # shellcheck disable=SC1090
    source "$1"
    return $?
  fi

  # No library load path can be found
  printf "load: Could not find '%s'[.bash]\n" "$slug" >&2
  return 1
}

# these are used in several places (most notably, load and temp_make)
export BATS_TMPDIR=${TMPDIR:-/tmp}
export BATS_TEST_DIRNAME=$SCRIPTDIR/suites
export BATS_TEST_FILENAME=$SCRIPTDIR/interactive
export BATS_TEST_NAME=interactive
export BATS_TEST_NUMBER=1

# shellcheck source=helper.sh
source "$SCRIPTDIR/helper.sh"
# a function named "setup" needs to be in the call stack for temp_make to work
setup() {
  create_test_dir
  setup_file

  export _TMPDIR
  export REPO_FIXTURES
  export HOME
  export NOTHOME
}
setup

setup_script="$SCRIPTDIR/setup.sh"
if [[ -f $setup_script ]]; then
  $setup_script
else
  "$SCRIPTDIR/setup-default.sh"
fi

cd "$HOME"
/usr/bin/env "$_shell"
delete_test_dir
