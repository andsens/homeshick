#!/usr/bin/env bash
# Define some colors
txtdef="\e[0m"    # Revert to default
bldred="\e[1;31m" # Red
bldgrn="\e[1;32m" # Green
bldblu="\e[1;34m" # Blue
bldcyn="\e[1;36m" # Cyan

repos="$HOME/.homesick/repos"

# Get the repo name from an URL
function parse_url {
	local regexp_extended_flag='r'
	local system=`uname -a`
	if [[ $system =~ "Darwin" && ! $system =~ "AppleTV" ]]; then
		regexp_extended_flag='E'
	fi
	printf -- "$1" | sed -$regexp_extended_flag 's#^.*/([^/.]+)(\.git)?$#\1#'
}

function clone {
	local repo_path="$repos/`parse_url $1`"
	if [[ -d "$1"  && ! -e "$repo_path" ]]; then
		log "symlink $repo_path to $1"
		ln -s $1 $repo_path
	else
		test -e $repo_path && die "     $bldblu exists $txtdef $repo_path"
		if [ -z "$B_PRETEND" ]; then
			if [ -n "$B_QUIET" ]; then
				git clone --quiet $1 $repo_path
			else
				git clone $1 $repo_path
			fi
		fi
		log "git clone for $repo_path done."
		pushd $repo_path > /dev/null
		if [ -z "$B_PRETEND" ]; then
			if [ -n "$B_QUIET" ]; then
				git submodule --quiet update --init
			else
				git submodule update --init
			fi
		fi
		log "git init for submodule(s)"
		popd > /dev/null
	fi
}

function generate {
	if [ -z "$B_PRETEND" ]; then
		mkdir -p $1
		pushd $1 > /dev/null
		if [ -n "$B_QUIET" ]; then
			git init --quiet
		else
			git init
		fi
		mkdir -p home
		popd > /dev/null
	fi
	log "git init for `pwd` && mkdir home"
}

function list {
	pushd $repos > /dev/null
	if [ `(find ./ -type d; find ./ -type l)  | wc -l` -lt 2 ]; then
		die "      $bldred error $txtdef no castles exist for homesick in: $repos"
	fi
	for repo in `echo "*"`; do
		pushd $repo > /dev/null
		printf "$bldcyn%12s$txtdef  %s\n" "$repo" "`git config remote.origin.url`"
		popd > /dev/null
	done
	popd > /dev/null
}

function pull {
	local repo="$repos/$1"
	castle_exists 'pull' $1
	pushd $repo > /dev/null
	if [ -z "$B_PRETEND" ]; then
		if [ -n "$B_QUIET" ]; then
			git pull --quiet
			git submodule --quiet update --init
		else
			git pull
			git submodule update --init
		fi
	fi
	log "git pull and update for submodule(s) in `pwd`"
	popd > /dev/null
}

function symlink {
	if [[ -z "$1" ]]; then
		die "$0 symlink requires at least 1 argument: \"homeshick symlink NAME\"."
	fi
	castle_exists 'symlink' $1
	local repo="$repos/$1/home"
	pushd $repo > /dev/null
	local direrrors=''
	shopt -s dotglob
	for file in `echo *`; do
		if [[ -e $HOME/$file && `readlink "$HOME/$file"` == "$repo/$file" ]]; then
			log "  $bldblu identical $txtdef $file"
			continue
		fi

		if [ -e $HOME/$file ]; then
			if [ -n "$B_SKIP" ]; then
				log "     $bldred exists $txtdef $file"
				continue
			fi
			if [ -z "$B_FORCE" ]; then
				log "   $bldred conflict $txtdef $file exists"
				read -p "Overwrite $file? [yN]" overwrite
				if [[ ! $overwrite =~ [Yy] ]]; then
					continue
				fi
			else
				log "  $bldred overwrite $txtdef $file"
			fi
			test -z "$B_PRETEND" && rm -rf "$HOME/$file"
		else
			log "    $bldgrn symlink $txtdef $file"
		fi

		test -z "$B_PRETEND" && ln -s $repo/$file $HOME/$file
	done
	shopt -u dotglob
	if [[ -n "$direrrors" && -z "$B_FORCE" ]]; then
		printf "\nThe following directories already exist and will only\n" >&2
		printf "be overwritten, if you delete or move them manually:\n" >&2
		printf "$direrrors\n" >&2
	fi
	popd > /dev/null
}

function track {
	if [[ -z "$1" || -z "$2" ]]; then
		die "homesick track requires at least 2 arguments: \"homeshick track FILE CASTLE\"."
	fi
	castle_exists 'track' $2
	local repo="$repos/$2/home"
	local newfile="$repo/$1"
	if [[ ! -e "$1" ]]; then
		die "      $bldred error $txtdef The file $1 does not exist."
	fi
	if [[ -e "$newfile" && -z "$B_FORCE" ]]; then
		die "      $bldred error $txtdef The file $1 already exists in the castle $2."
	fi
	if [ -z "$B_PRETEND" ]; then
		if [ -z "$B_FORCE" ]; then
			mv "$1" "$newfile"
			ln -s "$newfile" $1
		else
			mv -f "$1" "$newfile"
			ln -sf "$newfile" $1
		fi
	fi
	log "    $bldgrn symlink $txtdef $newfile to $1"
}

function castle_exists {
	local repo="$repos/$2/home"
	if [[ ! -d "$repo" ]]; then
		die "      $bldred error $txtdef Could not $1 $2, expected $repo to exist and contain dotfiles"
	fi
}

function extend_help {
	case $1 in
		clone)    printf "Usage:\n  $0 clone URL"     ;;
		generate) printf "Usage:\n  $0 generate PATH" ;;
		help)     printf "Usage:\n  $0 help [TASK]"   ;;
		list)     printf "Usage:\n  $0 list"          ;;
		pull)     printf "Usage:\n  $0 pull NAME"     ;;
		symlink)  printf "Usage:\n  $0 symlink NAME"  ;;
		track)    printf "Usage:\n  $0 track FILE CASTLE"  ;;
		*)    help  ;;
		esac
	printf "\n\n"
	runtime
}

function help {
cat <<EOM
 Usage: $0 [options] TASK

 Tasks:
  $0 clone URI          # Clone +uri+ as a castle for homesick
  $0 generate PATH      # generate a homesick-ready git repo at PATH
  $0 help [TASK]        # Describe available tasks or one specific task
  $0 list               # List cloned castles
  $0 pull NAME          # Update the specified castle
  $0 symlink NAME       # Symlinks all dotfiles from the specified castle
  $0 track FILE CASTLE  # add a file to a castle
EOM
}

function runtime {
cat <<EOM
 Runtime options:
   -q, [--quiet]    # Suppress status output
   -s, [--skip]     # Skip files that already exist
   -f, [--force]    # Overwrite files that already exist
   -p, [--pretend]  # Run but do not make any changes

EOM
}

function notfound {
	die "Could not find task \"$1\"."
}

function die {
	for line in "$@"; do
		printf "$line\n" >&2
	done
	exit 1
}

function log {
		if [ -z "$B_QUIET" ]; then
		for line in "$@"; do
			printf "$line\n"
		done
	fi
}


test -x `which git` || die "       $bldred git not found in path $txtdef "

mkdir -p "$repos"

for arg; do
	delim=""
	case "$arg" in
		clone)     args="${args}-c " ;;
		generate)  args="${args}-g " ;;
		list)      args="${args}-l " ;;
		pull)      args="${args}-p " ;;
		symlink)   args="${args}-s " ;;
		track)     args="${args}-t " ;;

		help)      extend_help $2
		           exit 0            ;;
		--help)    extend_help
		           exit 0            ;;
		--quiet)   args="${args}-q " ;;
		--skip)    args="${args}-i " ;;
		--force)   args="${args}-f " ;;
		--pretend) args="${args}-u " ;;

		# pass through anything else
		*) [[ "${arg:0:1}" == "-" ]] || delim="\""
		   args="${args}${delim}${arg}${delim} ";;
	esac
done

# reset the translated args
eval set -- $args
# now we can process with getopt

while getopts "c:g:lp:s:t:qifue:h" opt; do
	case $opt in
		c) clone $OPTARG       ;;
		g) generate $OPTARG    ;;
		l) list                ;;
		p) pull $OPTARG        ;;
		s) symlink $OPTARG     ;;
		t) shift $(( OPTIND - 1 ))
       track $OPTARG $1    ;;
		q) B_QUIET=1           ;;
		i) B_SKIP=1            ;;
		f) B_FORCE=1           ;;
		u) B_PRETEND=1         ;;
		e) extend_help $OPTARG ;;
		h) extend_help
		   exit 0              ;;
		* ) notfound
		   exit 1              ;;
	esac
done
